from aiogram import Bot, types, Dispatcher, executor
from os import environ
import db as botdb
import subprocess
import asyncio
import logging
import pymysql
import random
import pandas

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

handler = logging.StreamHandler()
handler.setLevel(logging.INFO)
formatter = logging.Formatter("%(levelname)s: %(message)s\n")
handler.setFormatter(formatter)
logger.addHandler(handler)

def escape(s):
    return s.replace("-", "\\-").replace(".", "\\.").replace("!", "\\!").replace("+", "\\+").replace("_", "\\_").replace(";", "\\;").replace("{", "\\{").replace("}", "\\}")

chats = [-1001331650913]
canPay = [958493955, 1210500401, 807020736]

handler = logging.FileHandler("debug.log")
handler.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(levelname)s: %(message)s\n")
handler.setFormatter(formatter)
logger.addHandler(handler)

loop = asyncio.get_event_loop()
bot = Bot(token=environ["IU_BOT_TOKEN"], parse_mode = types.ParseMode.MARKDOWN_V2)
dp = Dispatcher(bot, loop=loop)

@dp.message_handler(commands=["getlog"])
async def command_getlog(message: types.Message):
    await message.reply_document(open("debug.log"))

@dp.message_handler(commands=["clrlog"])
async def command_clrlog(message: types.Message):
    with open("debug.log", "w") as file:
        file.write("")
        await message.reply(escape("–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."))

@dp.message_handler(commands=["gettra"])
async def command_gettra(message: types.Message):
    cursor = botdb.db.cursor()
    sql  = "SELECT * FROM bank_transactions;"
    try:
        cursor.execute(sql)
        results = cursor.fetchall()
        await message.reply("`" + ("\n".join([", ".join([str(r) for r in res]) for res in results])) + "`")
    except pymysql.MySQLError as e:
        botdb.db.rollback()
        logger.error('Got error {!r}, errno is {}'.format(e, e.args[0]))

@dp.message_handler(commands=["start"])
async def command_start(message: types.Message):
    if message.chat.id < 0:
        await message.reply(escape("–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —á–∞—Ç–∞—Ö."))
    else:
        if botdb.addUser(botdb.db, message):
            await message.reply(escape("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ."))
        else:
            await message.reply(escape("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ."))

@dp.message_handler(commands=["register_balance"])
async def command_register_balance(message: types.Message):
    if message.chat.id < 0:
        await message.reply(escape("–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —á–∞—Ç–∞—Ö."))
    else:
        val = botdb.regBalance(botdb.db, message)
        if val:
            if val == 1:
                await message.reply(escape("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start –º–Ω–µ –≤ –ª—Å."))
            elif val == 2:
                await message.reply(escape("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ."))
        else:
            await message.reply(escape("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ."))

@dp.message_handler(commands=["update"])
async def command_update(message: types.Message):
    if message.chat.id < 0:
        await message.reply(escape("–î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —á–∞—Ç–∞—Ö."))
    else:
        botdb.updateUser(botdb.db, message)
        await message.reply(escape("–£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ."))

@dp.message_handler(commands=["get_chat_id"])
async def command_get_chat_id(message: types.Message):
    await message.reply(escape(str(message.chat.id)))

@dp.message_handler(commands=["get_msg"])
async def command_msg(message: types.Message):
    if message.reply_to_message:
        await message.reply(escape(str(message.reply_to_message)))
    else:
        await message.reply(escape(str(message)))

@dp.message_handler(commands=["plots"])
async def command_plots(message: types.Message):
    sql = "SELECT * FROM messages"
    results = pandas.read_sql_query(sql, botdb.db)
    results.to_csv("messages.csv", index=False) # –¥–∞, –∫–æ—Å—Ç—ã–ª—å, –∏ —á—Ç–æ —Å —Ç–æ–≥–æ? —Å–¥–µ–ª–∞–π—Ç–µ –ª—É—á—à–µ –µ—Å–ª–∏ –º–æ–∂–µ—Ç–µ
    subprocess.run(["R", "--vanilla", "--slave", "-f", "plot.r"]) # –∏ –¥–∞, –æ–ø—è—Ç—å –∫–æ—Å—Ç—ã–ª—å
    await message.reply_photo(open("pie.png", "rb"), caption=escape("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: " + str(results.count()).split()[1]))
    await message.reply_photo(open("abh.png", "rb"))
    await message.reply_photo(open("words.png", "rb"))
    await message.reply_photo(open("days.png", "rb"))
    subprocess.run(["rm", "*.png", "messages.csv"]) # –µ—â—ë 1 –∫–æ—Å—Ç—ã–ª—å‚Ä¶

@dp.message_handler(commands=["navigator"])
async def command_navigator(message: types.Message):
    await message.reply(escape(("–ù–∞–≤–∏–≥–∞—Ç–æ—Ä\n\n"
        + "[üóÉ –ö–∞–Ω—Ü–µ–ª—è—Ä–∏—è]({0}) ‚Äî –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Å–ø–æ—Ä—Ç\n"
        + "[üéñ –ì–∞–∑–µ—Ç–∞ –ü–∏–æ–Ω–µ—Ä—Å–∫–∞—è –°–ª–∞–≤–∞]({1})\n"
        + "[üì∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ –±—é—Ä–æ]({2})\n"
        + "[üõÉ –ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ]({3})\n"
        + "[‚öîÔ∏è –í–æ–µ–Ω–∫–æ–º–∞—Ç]({4})").format(
            "https://t.me/joinchat/SCbFMU2Q4tbKnv2LjCNtkA",
            "https://t.me/joinchat/AAAAAEUlQFEGCnIQZfnPJg",
            "https://t.me/joinchat/AAAAAFZyHztGygmQLlOKAw",
            "https://t.me/joinchat/AAAAAEuafsJAUmzt3xvjYw",
            "https://t.me/joinchat/SCbFMRy_nbvO3oW2zyXpJQ")
    ))

@dp.message_handler(commands=["get_balance"])
async def command_get_balance(message: types.Message):
    val = botdb.getBalance(botdb.db, tg_id=message.from_user.id)
    if val != None:
        await message.reply(escape("–í–∞—à –±–∞–ª–∞–Ω—Å ‚Äî {0} –ú–ê–†.").format(escape(str(val))))
    else:
        if botdb.getUser(botdb.db, tg_id=message.from_user.id):
            await message.reply(escape("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ."))
        else:
            await message.reply(escape("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ."))

@dp.message_handler(commands=["pay"])
async def command_pay(message: types.Message):
    if message.from_user.id in canPay:
        try:
            username = str(message.get_args().split()[0][1:])
            amount = float(message.get_args().split()[1])
        except:
            await message.reply(escape("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏–∏ –¥–∞–Ω–Ω—ã–µ."))
            return
        val = botdb.pay(botdb.db, amount, tg_username=username)
        if val == 1:
            await message.reply(escape("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ."))
        elif val == 2:
            await message.reply(escape("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ."))
        else:
            await message.reply(escape("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."))
            await bot.send_message(botdb.getUser(botdb.db, tg_username=username)["tg_id"], escape("–í—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ {0} –ú–ê–†.").format(
                escape(str(amount))
            ))
    else:
        await message.reply(escape("–£ –≤–∞—Å –Ω–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è."))

@dp.message_handler(commands=["send"])
async def command_send(message: types.Message):
    try:
        username = str(message.get_args().split()[0][1:])
        amount = float(message.get_args().split()[1])
    except:
        await message.reply(escape("–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏–∏ –¥–∞–Ω–Ω—ã–µ."))
        return
    if amount <= 0:
        await message.reply(escape("–í—ã –≤–≤–µ–ª–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."))
        return
    if message.from_user.username == username:
        await message.reply(escape("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ú–ê–† —Å–µ–±–µ."))
        return
    if botdb.getBalance(botdb.db, tg_id=message.from_user.id) < amount:
        await message.reply(escape("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —á–µ–º –∏–º–µ–µ—Ç–µ."))
        return
    val = botdb.send(botdb.db, amount, tg_id_from=message.from_user.id, tg_username_to=username)
    if val == 1:
        await message.reply(escape("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ."))
    elif val == 2:
        await message.reply(escape("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ."))
    elif val == 3:
        await message.reply(escape("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ."))
    elif val == 4:
        await message.reply(escape("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ."))
    else:
        await message.reply(escape("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."))
        await bot.send_message(botdb.getUser(botdb.db, tg_username=username)["tg_id"], escape("–í—ã –ø–æ–ª—É—á–∏–ª–∏ {0} –ú–ê–† –æ—Ç {1}.").format(
            escape(str(amount)),
            escape(message.from_user.full_name)
        ))

@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    await message.answer((escape("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å, {0}!\n"
        + "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏, —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –æ—Ç –ø—Ä–æ–±–ª–µ–º.\n"
        + "–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ª—É—á—à–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –Ω–∞—à–∏–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º, –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –∫–æ–º–º–∞–Ω–¥–æ–π /navigator.")).format(
            escape(message.new_chat_members[0].full_name)
    ))

@dp.message_handler(content_types=types.ContentType.LEFT_CHAT_MEMBER)
async def left_member(message: types.Message):
    await message.answer(escape("–†–∞–¥–∞ –±—ã–ª–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å, {0}. –ë—É–¥—É –∂–¥–∞—Ç—å –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è!".format(
        message.left_chat_member.full_name
    )))

@dp.message_handler(content_types=types.ContentType.TEXT)
async def new_message(message: types.Message):
    if message.chat.id == -1001331650913:
        botdb.newmsg(botdb.db, message)

executor.start_polling(dp, loop=loop, skip_updates=False)
botdb.db.close()
